// Tạo một class GhostTextWidget để hiển thị chữ mờ
class GhostTextWidget {
    constructor(editor, position, text) {
        this.editor = editor;
        this.position = position;
        this.text = text;
        this.domNode = document.createElement('div');
        this.domNode.className = 'ghost-text-widget';
        this.domNode.style.color = 'rgba(128, 128, 128, 0.7)';
        this.domNode.textContent = text;
        this.contentWidget = {
            getId: () => 'ghost-text',
            getDomNode: () => this.domNode,
            getPosition: () => {
                return {
                    position: this.position,
                    preference: [
                        monaco.editor.ContentWidgetPositionPreference.ABOVE,
                        monaco.editor.ContentWidgetPositionPreference.BELOW
                    ]
                };
            }
        };
        this.editor.addContentWidget(this.contentWidget);
    }

    dispose() {
        this.editor.removeContentWidget(this.contentWidget);
    }

    update(position, text) {
        this.position = position;
        this.text = text;
        this.domNode.textContent = text;
        this.editor.layoutContentWidget(this.contentWidget);
    }
}

// Sử dụng trong completion provider
const disposable = monacoInstance.languages.registerCompletionItemProvider(language, {
    triggerCharacters: ['.', ' ', '\n', '(', '{', '[', ';'],
    provideCompletionItems: async (model, position) => {
        const apiSuggestions = await fetchCompletions(model, position);

        // Nếu chỉ có 1 gợi ý, hiển thị ngay
        if (apiSuggestions && apiSuggestions.length === 1) {
            if (ghostTextWidget) {
                ghostTextWidget.dispose();
            }
            ghostTextWidget = new GhostTextWidget(editorRef.current, position, apiSuggestions[0].text);
        }

        // Trả về gợi ý để hiển thị trong dropdown
        return {
            suggestions: apiSuggestions.map(item => ({
                label: item.text,
                kind: monacoInstance.languages.CompletionItemKind.Snippet,
                insertText: item.text,
                detail: 'AI Suggestion',
                documentation: { value: 'Generated by Grok AI' },
                // Lưu data gốc để sử dụng khi hover
                originalData: item
            }))
        };
    }
});

// Lắng nghe sự kiện hover trên gợi ý
editor.onDidContentSuggest && editor.onDidContentSuggest(e => {
    if (e.suggestWidgetVisible && e.focusedItem) {
        const focusedData = e.focusedItem.completion.originalData;
        if (focusedData) {
            if (ghostTextWidget) {
                ghostTextWidget.update(editor.getPosition(), focusedData.text);
            } else {
                ghostTextWidget = new GhostTextWidget(editor, editor.getPosition(), focusedData.text);
            }
        }
    }
});